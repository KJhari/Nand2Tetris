// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */
 

 //Harikrishnan Kokkanthara Jeevan

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:

    //route all the in to all the regs, until the load is applied, only 1 of the chip will hold the dat.
    //pass the load as ip to dmux, address as selector and op all the dmux signals as ip to loads of the regs
    //it is counter intuitive to load the input to only 1 reg using a dmux
    DMux8Way(in=load, sel=address, a=dout1, b=dout2, c=dout3, d=dout4, e=dout5, f=dout6, g=dout7, h=dout8);

    Register(in=in, load=dout1, out=out1);
    Register(in=in, load=dout2, out=out2);
    Register(in=in, load=dout3, out=out3);
    Register(in=in, load=dout4, out=out4);
    Register(in=in, load=dout5, out=out5);
    Register(in=in, load=dout6, out=out6); 
    Register(in=in, load=dout7, out=out7);
    Register(in=in, load=dout8, out=out8);


    //ip all the op from the regs into a mux and use the addr to select the correct o/p
    Mux8Way16(a=out1, b=out2, c=out3, d=out4, e=out5, f=out6, g=out7, h=out8, sel=address, out=out);
}
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

//Harikrishnan Kokkanthara Jeevan

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=false, b=instruction, sel=instruction[15], 
    out[0]=jgtC,
    out[1]=jeqC,
    out[2]=jltC,
    out[3]=destMC,
    out[3]=writeM,
    out[4]=destDC,
    out[5]=destAC,
    out[6]=noC,
    out[7]=fC,
    out[8]=nyC,
    out[9]=zyC,
    out[10]=nxC,
    out[11]=zxC,
    out[12]=AorMC,
    //bits 13 & 14 are unused
    out[15]=insType);
   

    Not(in=insType, out=notInsType); // if MSB of ins is 0, then also a register has to be loaded
    Or(a=notInsType, b=destAC, out=loadA); // if either ins[15] or ins[5] (destination is A ) 


    //Load A register
    Mux16(a=instruction, b=aluOut, sel=insType, out=mux1Out); 
    // Register(in=mux1Out, load=loadA, out=regAout, addressM = out[0..14] ); // A register
    ARegister(in=mux1Out, load=loadA, out=regAout ,out[0..14]=addressM);


    //Load D register
    Mux16(a=regAout, b=inM, sel=AorMC, out=mux2Out);
    // Register(in=aluOut, load=destDC, out=regDout); //D register
    DRegister(in=aluOut, load=destDC, out=regDout);



    //op controls ng & zr along with ip jmp control bits to make pc load

    And(a=jltC, b=negOut, out=jle);
    And(a=jeqC, b=zeroOut, out=jeq);
    And(a=jgtC, b=notZeroAndnotNeg, out=jgt);

    //or all the above signals to form load
    Or(a=jle, b=jeq, out=lOreq);
    Or(a=lOreq, b=jgt, out=pcLoad);
    

    //its greater if it not less than and not equal to 0
    // Not(in=zeroOut, out=notZeroOut);
    // Not(in=negOut, out=notNegOut);
    // And(a=notZeroOut, b=notNegOut, out=notZeroAndnotNeg);
    Or(a=zeroOut, b=negOut, out=zOrneg);
    Not(in=zOrneg, out=notZeroAndnotNeg);

    ALU(x=regDout, y=mux2Out, zx=zxC, nx=nxC, zy=zyC, ny=nyC, f=fC, no=noC, out=outM, out=aluOut, zr=zeroOut, ng=negOut);
    
    //inc value is always set as true bcuz, if load is applied with i/p then inc is discarded
    PC(in=regAout, load=pcLoad, inc=true, reset=reset, out[0..14]=pc, out[15]=false);
}